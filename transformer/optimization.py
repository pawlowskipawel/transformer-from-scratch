# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/optimization.ipynb (unless otherwise specified).

__all__ = ['TransformerOptimizer']

# Cell
import torch

# Cell
class TransformerOptimizer:

    """
    Chapter 5.3 -  We used the Adam optimizer [20] with β1 = 0.9, β2 = 0.98 and eps = 10e-9.
    We varied the learning rate over the course of training, according to the formula:
    lrate = model_dim ** 0.5 * min(step_num ** (-0.5), step_num * warmup_steps**(-1.5))
    """

    def __init__(self, parameters, model_dim, warmup_steps):
        self.optimizer = torch.optim.Adam(parameters, betas=(0.9, 0.98), eps=1e-9)
        self.model_dim = model_dim
        self.warmup_steps = warmup_steps
        self.lr = None

        self._step = 1

    def get_current_lr(self):
        return self.lr

    def zero_grad(self):
        self.optimizer.zero_grad()

    def get_lr(self):
        return self.model_dim ** -0.5 * min(self._step ** -0.5, self._step * self.warmup_steps ** -1.5)

    def step(self):
        self.lr = self.get_lr()

        for param_group in self.optimizer.param_groups:
            param_group["lr"] = self.lr

        self.optimizer.step()

        self._step += 1

